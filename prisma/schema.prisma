generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]

  // Friend system
  sentFriendships     Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")

  // Notifications
  notified Notifications[] @relation("NotifiedNotification")
  notifier Notifications[] @relation("NotifierNotification")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  sender   User @relation("SentFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  FRIEND_REJECTED
}

model Notifications {
  id           String      @id @default(cuid())
  notifiedId   String
  notified     User        @relation("NotifiedNotification", fields: [notifiedId], references: [id], onDelete: Cascade)
  notifierId   String
  notifier     User        @relation("NotifierNotification", fields: [notifierId], references: [id], onDelete: Cascade)
  type         NotificationType      
  read         Boolean     @default(false)
  createdAt    DateTime    @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String?
  createdAt   DateTime @default(now())
  visibility  String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishes      Wish[]
}

model Wish {
  id              String  @id @default(cuid())
  title           String
  imageUrl        String? @default("/defaultWishImg.png")
  desireLvl       Int
  price           Float
  currency        String
  url             String?
  description     String?
  desiredGiftDate String?
  listId          String
  list            List    @relation(fields: [listId], references: [id], onDelete: Cascade)
}
